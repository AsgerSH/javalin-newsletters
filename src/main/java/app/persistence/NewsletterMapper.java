package app.persistence;

import app.entities.Newsletter;
import app.exceptions.DatabaseException;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class NewsletterMapper {

    public static List<Newsletter> getAllNewsletters(ConnectionPool connectionPool) throws DatabaseException
    {
        List<Newsletter> newsletterList = new ArrayList<>();
        String sql = "select * from newsletter";
        try (Connection connection = connectionPool.getConnection())
        {
            try (PreparedStatement ps = connection.prepareStatement(sql))
            {
                ResultSet rs = ps.executeQuery();

                while (rs.next())
                {
                    int id = rs.getInt("id");
                    String title = rs.getString("title");
                    String published = rs.getString("published");
                    String filename = rs.getString("filename");
                    String teasertext = rs.getString("teasertext");
                    String thumbnail_name = rs.getString("thumbnail_name");
                    Newsletter newsletter = new Newsletter(id, title, published, filename, teasertext, thumbnail_name);
                    newsletterList.add(newsletter);
                }
            }
        }
        catch (SQLException ex)
        {
            throw new DatabaseException(ex, "Could not get users from database");
        }
        return newsletterList;
    }

    public static Newsletter addNewsletter(ConnectionPool connectionPool, Newsletter newsletter) throws DatabaseException {
        String sql = "INSERT INTO newsletter (title, published, filename, teasertext, thumbnail_name) " +
                "VALUES (?, ?, ?, ?, ?) RETURNING id";

        try (
                Connection connection = connectionPool.getConnection();
                PreparedStatement ps = connection.prepareStatement(sql)
        ) {
            ps.setString(1, newsletter.getTitle());
            ps.setObject(2, newsletter.getPublished());
            ps.setString(3, newsletter.getFilename());
            ps.setString(4, newsletter.getTeasertext());
            ps.setString(5, newsletter.getThumbnail_name()); // Handles LocalDate properly

            try (var rs = ps.executeQuery()) { // Use executeQuery() since we're returning a result
                if (rs.next()) {
                    int generatedId = rs.getInt("id"); // Retrieve autogenerated ID

                    // Return a new Newsletter object including the generated ID
                    return new Newsletter(generatedId, newsletter.getTitle(), newsletter.getPublished(),
                            newsletter.getFilename(), newsletter.getTeasertext(),
                            newsletter.getThumbnail_name());
                } else {
                    throw new DatabaseException("Fejl ved tilføjelse af nyhedsbrev: ingen ID returneret.");
                }
            }
        } catch (SQLException e) {
            String msg = "Fejl ved tilføjelse af nyhedsbrev. Prøv igen.";
            throw new DatabaseException(msg, e.getMessage());
        }
    }
}
